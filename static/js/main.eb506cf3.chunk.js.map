{"version":3,"sources":["components/sociocon/index.js","pages/frontpage/index.js","App.js","serviceWorker.js","index.js"],"names":["Sociocon","clicked","_this","props","url","window","open","react_default","a","createElement","onClick","this","className","index_es","icon","faIcon","children","Component","FrontPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","scrollAndHideMe","popupTitle","state","scrollTo","ReactDOM","findDOMNode","refs","left","offsetTop","setState","woffyUrl","bgUrl","_this$state","ref","sociocon","faTelegram","faDiscord","faTwitter","alt","src","faChevronCircleDown","App","react_router_dom","react_router","path","exact","component","Boolean","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAgCeA,oNAzBXC,QAAU,WACHC,EAAKC,MAAMC,KACVC,OAAOC,KAAKJ,EAAKC,MAAMC,KAAO,IAAK,mFAKvC,OACIG,EAAAC,EAAAC,cAAA,OAAKC,QAASC,KAAKV,QAASW,UAAU,YAClCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8CACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBD,UAAU,gBAAgBE,KAAMH,KAAKR,MAAMY,UAE5DR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8CACfL,EAAAC,EAAAC,cAAA,YAAOE,KAAKR,MAAMa,mBAfXC,cC2DRC,cAxDX,SAAAA,EAAYf,GAAO,IAAAD,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAR,KAAAO,IACfhB,EAAAiB,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAZ,KAAMR,KAQVqB,gBAAkB,WAAM,IACbC,EAAcvB,EAAKwB,MAAnBD,WACPpB,OAAOsB,SAAS,EAAGC,IAASC,YAAY3B,EAAK4B,KAAKC,MAAMC,WACxD9B,EAAK+B,SAAS,CACVR,WAAYA,EAAa,kCAX7BvB,EAAKwB,MAAQ,CACTQ,SAAU,wCACVC,MAAO,+BACPV,WAAY,sDALDvB,wEAiBV,IAAAkC,EACiCzB,KAAKe,MAApCQ,EADFE,EACEF,SAAUC,EADZC,EACYD,MAAOV,EADnBW,EACmBX,WACxB,OACIlB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,OAAK4B,IAAI,OAAOzB,UAAU,uBACtBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,+BACfL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,qBAAd,cACAL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,wBAAd,6CACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iCACXL,EAAAC,EAAAC,cAAC6B,EAAD,CAAUvB,OAAQwB,IAAYnC,IAAI,mCAAlC,cAIAG,EAAAC,EAAAC,cAAC6B,EAAD,CAAUvB,OAAQyB,IAAWpC,IAAI,mDAAjC,mBAIAG,EAAAC,EAAAC,cAAC6B,EAAD,CAAUvB,OAAQ0B,IAAWrC,IAAI,sCAAjC,iBAQRG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uFAAuF8B,IAAI,aAAaC,IAAKR,IAC5H5B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kFAAkF8B,IAAI,WAAWC,IAAKT,IAErH3B,EAAAC,EAAAC,cAAA,QAAMC,QAASC,KAAKa,gBAAiBZ,UAAWa,GAC5ClB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAM8B,iBAjDvB3B,aCMT4B,MARf,WACE,OACEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACGvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhC,MCIpBiC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZN1B,IAAS2B,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eb506cf3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './style.scss'\n\nclass Sociocon extends Component {\n\n    clicked = () => {\n        if(this.props.url) {\n            window.open(this.props.url || \"#\", '_blank');\n        }\n    }\n\n    render() {\n        return (\n            <div onClick={this.clicked} className=\"sociocon\">\n                <div className=\"sociocon-container sociocon-container-icon\">\n                <FontAwesomeIcon className=\"sociocon-icon\" icon={this.props.faIcon} />\n                </div>\n                <div className=\"sociocon-container sociocon-container-text\">\n                <span>{this.props.children}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nSociocon.propTypes = {\n    faIcon: PropTypes.object,\n    url: PropTypes.string\n};\n\nexport default Sociocon;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'\nimport {faDiscord, faTelegram, faTwitter} from '@fortawesome/free-brands-svg-icons'\nimport Sociocon from '../../components/sociocon'\n\nclass FrontPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            woffyUrl: \"http://127.0.0.1:5000/watercolor2.png\",\n            bgUrl: \"http://127.0.0.1:5000/bg.png\",\n            popupTitle: \"frontpage-popup-info frontpage-popup-info-animated\",\n        }\n    }\n\n    scrollAndHideMe = () => {\n        const {popupTitle} = this.state\n        window.scrollTo(0, ReactDOM.findDOMNode(this.refs.left).offsetTop);\n        this.setState({\n            popupTitle: popupTitle + ' frontpage-popup-info-hidden'\n        })\n    }\n\n    render() {\n        const {woffyUrl, bgUrl, popupTitle} = this.state\n        return (\n            <div className=\"frontpage\">\n                <div className=\"frontpage-main\">\n                    <div ref=\"left\" className=\"frontpage-main-left\">\n                        <div className=\"frontpage-main-left-content\">\n                        <h1 className=\"frontpage-heading\">NerdyWoffy</h1>\n                        <h2 className=\"frontpage-subheading\">Your usual wolf friend but slightly nerd!</h2>\n                        <div className=\"frontpage-main-left-sociocons\">\n                            <Sociocon faIcon={faTelegram} url=\"https://telegram.dog/nerdywoffy\">\n                            nerdywoffy\n                            </Sociocon>\n\n                            <Sociocon faIcon={faDiscord} url=\"https://discordapp.com/users/133218454852337664\">\n                            NerdyWoffy#1984\n                            </Sociocon>\n\n                            <Sociocon faIcon={faTwitter} url=\"https://www.twitter.com/nerdywoffy\">\n                            nerdywoffy\n                            </Sociocon>\n\n                        </div>\n                        </div>\n                    </div>\n\n                    <div className=\"frontpage-main-right\">\n                    <img className=\"frontpage-sideimage frontpage-main-right-image-right frontpage-main-right-background\" alt=\"Background\" src={bgUrl} />\n                    <img className=\"frontpage-sideimage frontpage-main-right-image-right frontpage-main-right-woffy\" alt=\"Woffy :3\" src={woffyUrl} />\n                    \n                    <span onClick={this.scrollAndHideMe} className={popupTitle}>\n                        <FontAwesomeIcon icon={faChevronCircleDown} /></span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FrontPage;","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport FrontPage from './pages/frontpage'\n\nfunction App() {\n  return (\n    <Router>\n       <Route path=\"/\" exact component={FrontPage} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}